import NextAuth from "next-auth";
import CredentialsProvider from "next-auth/providers/credentials";
import GoogleProvider from "next-auth/providers/google";
import { MongoDBAdapter } from "@auth/mongodb-adapter";
import { clientPromise, connectMongoose } from "../../../../libs/mongoConnect";
import { User } from "../../../models/user";
import bcrypt from "bcryptjs";

const handler = NextAuth({
  secret: process.env.NEXTAUTH_SECRET,
  debug: true,
  adapter: MongoDBAdapter(clientPromise), // ✅ Uses shared MongoDB connection
  providers: [
    GoogleProvider({
      clientId: process.env.GOOGLE_CLIENT_ID,
      clientSecret: process.env.GOOGLE_CLIENT_SECRET,
    }),
    CredentialsProvider({
      name: "Credentials",
      credentials: {
        email: { label: "Email", type: "email", placeholder: "example@example.com" },
        password: { label: "Password", type: "password" },
      },
      async authorize(credentials, req) {
        try {
          console.log("🚀 Authorize function triggered");

          if (!credentials?.email || !credentials?.password) {
            throw new Error("Missing email or password");
          }

          console.log("📧 Received Email:", credentials.email);
          console.log("🔑 Received Password:", credentials.password ? "Present" : "Missing");

          // ✅ Use the shared Mongoose connection
          await connectMongoose();
          console.log("✅ Connected to database");

          const user = await User.findOne({ email: credentials.email });
          console.log("🔍 User fetched:", user);

          if (!user) {
            console.error("❌ User not found");
            throw new Error("User not found");
          }

          const passwordOk = bcrypt.compareSync(credentials.password, user.password);
          console.log("🔑 Password Match:", passwordOk);

          if (!passwordOk) {
            console.error("❌ Invalid credentials");
            throw new Error("Invalid credentials");
          }

          console.log("✅ User authenticated:", { id: user._id, email: user.email });
          return { id: user._id.toString(), email: user.email }; // ✅ Ensure `id` is a string
        } catch (error) {
          console.error("🔥 Authorize Error:", error);
          throw error;
        }
      },
    }),
  ],
  pages: { signIn: "/login" },
  callbacks: {
    async jwt({ token, user }) {
      console.log("🔄 JWT Callback Before:", token);
      if (user) {
        token.id = user.id;
        token.email = user.email;
      }
      console.log("🔄 JWT Callback After:", token);
      return token;
    },
    async session({ session, token }) {
      console.log("📦 Session Callback Before:", session);
      if (token) {
        session.user = { id: token.id, email: token.email };
      }
      console.log("📦 Session Callback After:", session);
      return session;
    },
  },
});

export { handler as GET, handler as POST };
